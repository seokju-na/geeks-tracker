/*
 Generated by typeshare 1.7.0
*/

export type TaskId = string;

export type Version = number;

export type Timestamp = number;

export enum TaskStatus {
	Backlog = "BACKLOG",
	Queue = "QUEUE",
	InProgress = "IN_PROGRESS",
	Done = "DONE",
}

export interface TaskSchedule {
	at: Timestamp;
	status: TaskStatus;
}

export interface Task {
	id: TaskId;
	title: string;
	body?: string;
	status: TaskStatus;
	createdAt: Timestamp;
	updatedAt: Timestamp;
	backlogAt?: Timestamp;
	inProgressAt?: Timestamp;
	queueAt?: Timestamp;
	doneAt?: Timestamp;
	schedule?: TaskSchedule;
}

export interface Persisted<T> {
	aggregateId: string;
	version: Version;
	event: T;
}

export type DispatchMessage = 
	| { name: "task.persisted", data: {
	events: Persisted<TaskEvent>[];
}};

export type TaskEvent = 
	| { name: "task.created", data: {
	id: TaskId;
	title: string;
	body?: string;
	status: TaskStatus;
	schedule?: TaskSchedule;
}}
	| { name: "task.titleUpdated", data: {
	title: string;
}}
	| { name: "task.statusUpdated", data: {
	status: TaskStatus;
}}
	| { name: "task.bodyUpdated", data: {
	body?: string;
}}
	| { name: "task.deleted", data: {
}}
	| { name: "task.scheduleUpdated", data: {
	schedule?: TaskSchedule;
}};

export type TaskCommand = 
	| { name: "task.create", data: {
	title: string;
	status?: TaskStatus;
	schedule?: TaskSchedule;
}}
	| { name: "task.updateTitle", data: {
	id: TaskId;
	title: string;
}}
	| { name: "task.updateStatus", data: {
	id: TaskId;
	status: TaskStatus;
}}
	| { name: "task.updateBody", data: {
	id: TaskId;
	body?: string;
}}
	| { name: "task.delete", data: {
	id: TaskId;
}}
	| { name: "task.updateSchedule", data: {
	id: TaskId;
	schedule?: TaskSchedule;
}};

